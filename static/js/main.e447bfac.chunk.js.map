{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","defaultProps","aboutTxt","TextForm","useState","text","settext","style","color","heading","value","onChange","event","target","backgroundColor","rows","uppercasetxt","toUpperCase","showAlert","lowcasetxt","toLowerCase","finalSentence","replace","letter","document","getElementById","select","navigator","clipboard","writeText","my_text","blob","Blob","saveAs","split","length","Math","round","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e447bfac.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        \r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/about\">{props.aboutTxt}</a>\r\n        </li>\r\n         */}\r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-danger\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch text-${props.mode==='light'? 'dark':'light'}`}>\r\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n        \r\n    )\r\n}\r\n// To set the properties of props to be a string or number or anything else and setting it to be required by using .isrequired function\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutTxt: PropTypes.string.isRequired\r\n}\r\n// To set default values of props if nothing is defined\r\nNavbar.defaultProps = {\r\n    title: 'Title here',\r\n    aboutTxt: 'About'\r\n}\r\n","import React, {useState} from 'react'\r\nimport { saveAs } from 'file-saver';\r\n\r\nexport default function TextForm(props) {\r\n    const [text, settext] = useState('');\r\n    // text = \"New text\"; Wrong way to change the state\r\n    // settext(\"New text\"); // correct way to change the state\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let uppercasetxt = text.toUpperCase()\r\n        settext(uppercasetxt)\r\n        props.showAlert(\"Converted to Uppercase\", \"success\")\r\n    }\r\n\r\n    const handleloClick = ()=>{\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let lowcasetxt = text.toLowerCase()\r\n        settext(lowcasetxt)\r\n        props.showAlert(\"Converted to Lowercase\", \"success\")\r\n    }\r\n\r\n    const handlecapitalize = ()=>{\r\n        const lowCase = text.toLowerCase();\r\n        const finalSentence = lowCase.replace(/(^\\w{1})|(\\s+\\w{1})/g, letter => letter.toUpperCase());\r\n\r\n        settext(finalSentence)\r\n\r\n        // ^ matches the beginning of the string.\r\n        // \\w matches any word character.\r\n        // {1} takes only the first character.\r\n        // Thus, ^\\w{1} matches the first letter of the word.\r\n        // | works like the boolean OR. It matches the expression after and before the |.\r\n        // \\s+ matches any amount of whitespace between the words (for example spaces, tabs, or line breaks).\r\n    }\r\n\r\n    \r\n    const handleCopy = ()=>{\r\n        let text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value)\r\n        props.showAlert(\"Copied to clipboard\", \"success\")\r\n    }\r\n\r\n    const handleClear = ()=>{\r\n        let cleartxt = ''\r\n        settext(cleartxt)\r\n        props.showAlert(\"Textbox cleared\", \"success\")\r\n    }\r\n\r\n    // function to save the file in text format\r\n    const saveFile = ()=>{\r\n        let my_text = document.getElementById('myBox').value;\r\n        let blob = new Blob([my_text], {type: \"text/plain;charset=utf-8\" });\r\n        saveAs(blob, \"File.txt\");\r\n        props.showAlert(\"File downloaded\", \"success\")\r\n        \r\n    }\r\n\r\n    // const handleRedundandcy = ()=>{\r\n    //     let set1 = new Set(text.split(\" \"));\r\n    //     let newText = Array.from(set1).join(\" \");\r\n    //     settext(newText)\r\n    // }\r\n\r\n    // const handleLowClick = ()=> {\r\n    //     let lowertxt = text.toLowerCase()\r\n    //     settext(lowertxt)\r\n    // }\r\n\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"On change\");\r\n        settext(event.target.value)\r\n    }\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'? 'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                \r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'? '#091e33':'white', color: props.mode==='dark'? 'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleloClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handlecapitalize}>Capitalize</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy text</button>\r\n            <button className=\"btn btn-danger mx-2\" onClick={handleClear}>Clear</button>\r\n            <button className=\"btn btn-success mx-2\" onClick={saveFile}>Save</button>\r\n            {/* <button className=\"btn btn-danger mx-2\" onClick={handleRedundandcy}>Remove Redundant Words</button> */}\r\n            \r\n            \r\n            \r\n            \r\n            \r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'? 'white':'black'}}>\r\n            <h2>Your text summary</h2>\r\n            \r\n            <p>{text.split(\" \").length} <b>words</b>  and {text.length} <b>characters</b></p>\r\n            <p>{Math.round(0.008 * text.split(\" \").length)} <strong>Minutes read</strong></p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter some text above to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // ye btata h dark mode enabled h ya nhi\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n      \n    }, 1500);\n\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark')\n      document.body.style.backgroundColor = '#030415'\n      showAlert(\"Dark mode has been enabled\", \"success\")\n      document.title = \"TextUtils - Dark Mode\"\n\n      // to flicker title\n      // setInterval(() => {\n      //   document.title = \"TextUtils is amazing\"\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = \"Install TextUtils now\"\n      // }, 1500);\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"Light mode has been enabled\", \"success\")\n      // setting title on toggle light mode\n      document.title = \"TextUtils - Light Mode\"\n    }\n  }\n  return (\n    <>\n    \n    {/* <Navbar title=\"TextUtils\"  aboutTxt=\"About Us\" /> */}  \n    {/* <Navbar/> */}\n    {/* <Router> */}\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n    <Alert alert={alert}/>\n\n    <div className=\"container my-3\">\n    \n    {/* <Switch>\n            <Route exact path=\"/about\"> */}\n              {/* <About /> */}\n            {/* </Route> */}\n            \n            {/* <Route exact path=\"/\"> */}\n              <TextForm heading=\"Enter your text to analyze\" mode={mode} showAlert={showAlert}/>\n              \n            {/* </Route> */}\n    {/* </Switch> */}\n    \n    \n    </div>\n    {/* </Router> */}\n  \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}